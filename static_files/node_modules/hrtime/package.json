{
  "name": "hrtime",
  "author": {
    "name": "Rune Labs"
  },
  "main": "build/Release/hrtime",
  "version": "0.5.0",
  "readme": "hrtime:\ta module with a simple interface to POSIX system high resolution time functions\n\tfor the node.js runtime framework.\n\nAuthor\tRune Karlsen <runelabs@gmail.com>\nWebsite\thttp://github.com/runelabs/hrtime\n\nProvides the following functions - all returning nanosecond numbers as string:\n\ttime() - realtime clock in nanoseconds\n\tuptime() - system uptime in nanoseconds\n\tcputime() - accumulated time spent by cpu on the process in nanoseconds\n\tinitime() - time of module initialization in nanoseconds\n\truntime() - time since module was initialized in nanoseconds\n\tresolution() - time resolution of the realtime clock in nanoseconds\n\n\nRequires the \"node.js\" package which is a \"CommonJS\" implementatotion.\nSee www.nodejs.org and www.commonjs.org .\n\n\n\n\nTo build this module for node.js, after having installed node.js, run\n\tnode-waf configure\n\tnode-waf build\n\nThen to use this module\n\tcp hrtime.node <your project destination>\n\nand include in your node.js Javascript the following\n\tvar hrtime = require \"./hrtime\";\n\nwhich will load the hrtime module from the same directory as your script.\n\n\n\n\n\nExample usage:\n\n\t(1)\n\tvar rtime = hrtime.runtime(); // time since the node.js process was started, running time of program\n\n\t(2)\n\tvar stime = hrtime.cputime(); // starttime of measurement\n\tvar mytime = hrtime.time(); // example operation/block being measured or profiled\n\tvar etime = hrtime.cputime(); // endtime of measurement\n\tvar dtime = etime - stime; // cpu time/effort used on the operation measured/profiled\n\n\t(3)\n\tvar atime = hrtime.uptime(); // some point in time since the system was booted\n\tvar mytime = hrtime.time(); // example operation/block being measured or profiled\n\tvar btime = hrtime.uptime() // next point in time since the system was booted\n\tvar dtime = btime - atime; // nanoseconds between the two points in time, real time elapsed before completion\n\n\t(4)\n\tvar time1 = hrtime.time(); // real time clock at first point\n\tvar restime = hrtime.resolution(); // example operation/block being measured or profiled\n\tvar time1 = hrtime.time(); // real time clock at second point\n\tvar dtime = time2 - time1; // nanoseconds between the two points in time, real time elapsed before completion\n\n\nNote that in example (4) the clock can be adjusted by daylight savings time, system adjustments like NTP or otherwise,\nand thus might give unexpected timing/profiling results.\n\n\nFurther function details:\n\n\n * NAME: time()\n * RETURNS: An ASCII string representing system realtime clock high resolution time in number of nanoseconds.\n *   Note that daylight savings time (DST) and other system clock adjustments will influence this time result.\n * ERRORS: Returns an empty string (\"\") on any error that occured during the request.\n * PARAMETERS: If a boolean value of 'true' is passed, then only the nanosecond part of the time will be returned.\n * SEE: http://www.opengroup.org/onlinepubs/009695399/functions/clock_gettime.html\n\n\n * NAME: uptime()\n * RETURNS: An ASCII string representing the high resolution time in number of nanoseconds that has passed since the last boot time or time epoch.\n * ERRORS: Returns an empty string (\"\") on any error that occured during the request.\n * PARAMETERS: NONE.\n * SEE: http://www.opengroup.org/onlinepubs/009695399/functions/clock_gettime.html\n\n\n * NAME: cputime()\n * RETURNS: An ASCII string representing the high resolution time in number of nanoseconds of the accumulated time the cpu has spent working on the process.\n * ERRORS: Returns an empty string (\"\") on any error that occured during the request.\n * PARAMETERS: NONE.\n * SEE: http://www.opengroup.org/onlinepubs/009695399/functions/clock_gettime.html\n\n\n * NAME: initime()\n * RETURNS: An ASCII string representing the high resolution time in number of nanoseconds of the time when the module was initialized.\n *   Note that the time defaults to the same clock as uptime(), but will use the realtime clock if the former is unavailable.\n * ERRORS: Returns an empty string (\"\") on any error that occured during the request.\n * PARAMETERS: NONE.\n * SEE: http://www.opengroup.org/onlinepubs/009695399/functions/clock_gettime.html\n\n\n * NAME: runtime()\n * RETURNS: An ASCII string representing the high resolution time in number of nanoseconds of the time passed since the module was initialized.\n * ERRORS: Returns an empty string (\"\") on any error that occured during the request.\n * PARAMETERS: NONE.\n * SEE: http://www.opengroup.org/onlinepubs/009695399/functions/clock_gettime.html\n\n\n * NAME: resolution()\n * RETURNS: An ASCII string representing the resolution of the realtime clock in number of nanoseconds.\n * ERRORS: Returns an empty string (\"\") on any error that occured during the request.\n * PARAMETERS: NONE.\n * SEE: http://www.opengroup.org/onlinepubs/009695399/functions/clock_getres.html\n\n",
  "readmeFilename": "README",
  "_id": "hrtime@0.5.0",
  "description": "hrtime:\ta module with a simple interface to POSIX system high resolution time functions \tfor the node.js runtime framework.",
  "dist": {
    "shasum": "96eaf9decee162751efa7454f74a03ac90e7ccf5"
  },
  "_from": "hrtime@",
  "_resolved": "https://registry.npmjs.org/hrtime/-/hrtime-0.5.0.tgz"
}
